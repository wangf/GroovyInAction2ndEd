package com.manning.groovyinaction

import groovy.sql.Sql
import groovy.util.logging.Slf4j
import org.slf4j.bridge.SLF4JBridgeHandler
import uk.org.lidalia.sysoutslf4j.context.LogLevel
import uk.org.lidalia.sysoutslf4j.context.SysOutOverSLF4J

@Slf4j
class DatabaseCreator {

    static void main(String[] args) {
        log.debug "Starting..."
        def runner = new DatabaseCreator()

        def julHandler = new SLF4JBridgeHandler()
        julHandler.removeHandlersForRootLogger()
        julHandler.install()
        SysOutOverSLF4J.sendSystemOutAndErrToSLF4J LogLevel.DEBUG, LogLevel.ERROR

//        println groovy.sql.Sql.methods

        runner.run()
//        runner.all()  
        log.debug "Done."
    }


    void run() {
        def db = connect()
        create db
        execute db
//        dumpTable db, "Athlete"
        dump2 db, "Athlete"
    }


    Sql connect() {
        def source = new org.h2.jdbcx.JdbcDataSource()
        source.with {
            setURL 'jdbc:h2:mem:GinA;DB_CLOSE_DELAY=-1'
            setUser 'sa'
            setPassword ''

        }

        new groovy.sql.Sql(source)
    }

    def create = { db ->
        db.execute '''
    DROP   INDEX athleteIdx IF EXISTS;
    DROP   TABLE Athlete    IF EXISTS;
    CREATE TABLE Athlete (
        athleteId   INTEGER GENERATED BY DEFAULT AS IDENTITY,
        firstname   VARCHAR(64),
        lastname    VARCHAR(64),
        dateOfBirth DATE
    );
    CREATE INDEX athleteIdx ON Athlete (athleteId);
    '''
    }

    def execute = { db ->
        log.debug "Executing SQL..."
        String athleteInsert = '''
            INSERT INTO Athlete (firstname, lastname, dateOfBirth)
                VALUES  (?, ?, ?);
        '''

//        db.execute athleteInsert, ['Paul', 'Tergat', '1969-06-17']
//        db.execute athleteInsert, ['Khalid', 'Khannouchi', '1971-12-22']
//        db.execute athleteInsert, ['Ronaldo', 'da Costa', '1970-06-07']

//
//        def athletes = [
//                [first: 'Paul', last: 'Tergat', birth: '1969-06-17'],
//                [first: 'Khalid', last: 'Khannouchi', birth: '1971-12-22'],
//                [first: 'Ronaldo', last: 'da Costa', birth: '1970-06-07']
//        ]
//        athletes.each { athlete ->
//            db.execute """
//    INSERT INTO Athlete (firstname, lastname, dateOfBirth)
//      VALUES (${athlete.first}, ${athlete.last}, ${athlete.birth});
//  """
//
//
//            db.execute '''
//    DELETE FROM Athlete WHERE firstname = 'Dierk';
//'''
//
//            db.execute '''
//    INSERT INTO Athlete (firstname, lastname, dateOfBirth)
//                 VALUES (?, ?, ?);
//''', ['Dirk', 'Koenig', '1968-04-19']
//
//            String wrong = 'Dirk'
//            String right = 'Dierk'
//            db.execute """
//    UPDATE Athlete SET firstname = $right WHERE firstname = $wrong;
//"""
//
//
//            println ' Athlete Info '.center(25, '-')
//            def fmt = new java.text.SimpleDateFormat('dd. MMM yyyy (E)',
//                    Locale.US)
//            db.eachRow('SELECT * FROM Athlete') { athlete1 ->
//                log.debug athlete1.firstname + ' ' + athlete1.lastname
//                log.debug 'born on ' + fmt.format(athlete1.dateOfBirth)
//                log.debug '-' * 25
//            }
//
//
//
//            db.query('SELECT firstname, lastname FROM Athlete') { resultSet ->
//                if (resultSet.next()) {
//                    log.debug "RES2: " + resultSet.getString(1) + " " + resultSet.getString('lastname')
//                }
//            }
//
//
//            List athletes2 = db.rows('SELECT firstname, lastname FROM Athlete')
//            log.debug "There are ${athletes2.size()} Athletes:"
//            log.debug athletes.collect { "${it[0]} ${it.lastname}" }.join(", ")
//
//        }


//        db.withTransaction {
//            athleteInsert 'Haile', 'Gebrselassie', '1973-04-18'
//            athleteInsert 'Patrick', 'Makau', '1985-03-02'
//        }

//        db.withBatch { stmt ->
//            stmt.addBatch """INSERT INTO Athlete (firstname, lastname, dateOfBirth)
//                VALUES ('Paul',   'Tergat', '1969-06-17')"""
//            stmt.addBatch """INSERT INTO Run (distance, time, venue, when, fkAthlete)
//                SELECT 42195, ${2*60*60+4*60+55}, 'Berlin', '2003-09-28',
//                athleteId FROM Athlete WHERE lastname='Tergat'"""
//        }


    }


    def dumpTable = { db, tablename ->
        log.debug " CONTENT OF TABLE ${tablename} ".center(40, '-')
        db.query('SELECT * FROM ' + tablename) { rs ->
            def meta = rs.metaData
            if (meta.columnCount <= 0) return
            for (i in 0..<meta.columnCount) {
                log.debug "${i}: ${meta.getColumnLabel(i + 1)}".padRight(20) +
                        rs[i]?.toString() + "\n"
            }
            println '-' * 40
        }
    }


    def dump2(db, tablename) {
        def printColNames = { meta ->
            def width = meta.columnCount * 18
            log.debug " CONTENT OF TABLE ${tablename} ".center(width, '-')
            (1..meta.columnCount).each {
                print meta.getColumnLabel(it).padRight(18)
            }
            log.debug "\n"
            log.debug '-' * width
        }
        def printRow = { row ->
            row.toRowResult().values().each {
                print it.toString().padRight(18)
            }
            log.debug "\n"
        }
        db.eachRow('SELECT * FROM ' + tablename, printColNames, printRow)
    }


}
