@Grab('com.h2database:h2:1.3.173')
import groovy.sql.Sql
import groovy.transform.Field
import org.h2.jdbcx.JdbcDataSource

@Lazy @Field Sql db = new Sql(new JdbcDataSource(      //#A
        URL: 'jdbc:h2:mem:GIA;DB_CLOSE_DELAY=-1',
        user: 'sa',
        password: ''))

def reset() {                                          //#B
    db.execute '''
    DROP   INDEX AthleteIdx IF EXISTS;
    DROP   TABLE Athlete IF EXISTS;
    CREATE TABLE Athlete (
      athleteId   INTEGER GENERATED BY DEFAULT AS IDENTITY,
      firstname   VARCHAR(64),
      lastname    VARCHAR(64),
      dateOfBirth DATE
    );
    CREATE INDEX AthleteIdx ON Athlete (athleteId);
  '''
}

def create(firstname, lastname, dateOfBirth) {         //#1
    db.execute """
    INSERT INTO Athlete ( firstname, lastname, dateOfBirth)
                 VALUES ($firstname,$lastname,$dateOfBirth);
  """
}

def findAll() {                                        //#2
    db.rows 'SELECT * FROM Athlete'
}

def updateFirstName(wrong, right) {                    //#3
    db.execute """
    UPDATE Athlete
    SET firstname = $right WHERE firstname = $wrong;
  """
}

def delete(firstname) {                                //#4
    db.execute """
    DELETE FROM Athlete WHERE firstname = $firstname;
  """
}

// uncomment next line to enable logging
//Logger.getLogger('groovy.sql').level = Level.FINE

reset()
assert !findAll(), 'we are initially empty'
create 'Dirk', 'Koenig', '1968-04-19'
assert 'Dirk' == findAll()[0].firstname                //#5
updateFirstName 'Dirk', 'Dierk'
assert 'Dierk' == findAll()[0].firstname
delete 'Dierk'
assert !findAll(), 'after delete, we are empty again'
